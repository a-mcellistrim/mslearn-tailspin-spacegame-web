trigger:
- '*'

pool:
  name: 'Default'

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '6.x'

steps:
# Use .NET SDK 6.x
- task: UseDotNet@2
  displayName: 'Use .NET SDK $(dotnetSdkVersion)'
  inputs:
    packageType: sdk
    version: '$(dotnetSdkVersion)'

# Install Node.js and npm (for self-hosted Linux agents)
- script: |
    curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo apt-get install -y nodejs
    node -v
    npm -v
  displayName: 'Install Node.js and npm'
  continueOnError: true

# Install npm packages
- script: |
    npm ci
  displayName: 'Install npm packages'
  continueOnError: true

# Compile SASS using local node_modules
- script: |
    npx sass Tailspin.SpaceGame.Web/wwwroot:Tailspin.SpaceGame.Web/wwwroot
  displayName: 'Compile Sass assets'
  continueOnError: true

# Run Gulp tasks using npx
- script: |
    npx gulp
  displayName: 'Run gulp tasks'
  continueOnError: true

# Write build info to a file
- script: |
    echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot
  continueOnError: true

# Restore project dependencies
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Build project
- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/*.csproj'

# Run unit tests
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    projects: '**/*.Tests.csproj'
    arguments: '--configuration $(buildConfiguration)'

# Pack the Models project
- task: DotNetCoreCLI@2
  displayName: 'Pack the Models project'
  inputs:
    command: 'pack'
    packagesToPack: '**/Tailspin.SpaceGame.Web.Models.csproj'
    configuration: '$(buildConfiguration)'
    packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
    versioningScheme: 'byPrereleaseNumber'
    majorVersion: '1'
    minorVersion: '0'
    patchVersion: '0'

# Debug - List packages
- script: |
    echo "Listing all files in Build.ArtifactStagingDirectory:"
    dir /s "$(Build.ArtifactStagingDirectory)"
  displayName: 'Debug - List output files'
  condition: always()



# Option 1: Just the feed name
- task: NuGetCommand@2
  displayName: 'Push NuGet packages - Option 1'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'Tailspin.SpaceGame.Web.Models'
  continueOnError: true
  enabled: false

# Option 2: Project/feed format
- task: NuGetCommand@2
  displayName: 'Push NuGet packages - Option 2'
  inputs:
    command: push
    packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'CI-CD_Training/Tailspin.SpaceGame.Web.Models'
  continueOnError: true
  enabled: true  # Enable this if Option 1 fails

# Option 3: Use DotNetCoreCLI task
- task: DotNetCoreCLI@2
  displayName: 'Push NuGet packages - Option 3'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'Tailspin.SpaceGame.Web.Models'
  continueOnError: true
  enabled: false  # Enable this if Options 1 and 2 fail



# Publish the web project
- task: DotNetCoreCLI@2
  displayName: 'Publish the web project'
  inputs:
    command: 'publish'
    projects: '**/Tailspin.SpaceGame.Web.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

# Publish as build artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()